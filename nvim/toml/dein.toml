[[plugins]]
repo = 'liuchengxu/vim-clap'


[[plugins]]
repo = 'Shougo/denite.nvim'
on_event = "BufRead"
hook_add = '''
let g:mapleader = "\<Space>"
nmap <leader>fb :<C-u>Denite buffer -split=floating<CR>
nmap <leader>ff :<C-u>Denite file/rec -split=floating<CR>
nmap <leader>fg :<C-u>Denite file/rec/git -split=floating<CR>
nmap <leader>fr :<C-u>Denite grep -split=floating<CR>
nmap <leader>fl :<C-u>Denite line -split=floating<CR>
nmap <leader>fd :<C-u>Denite directory_rec -split=floating<CR>
nmap <leader>fs :<C-u>Denite coc-symbols -split=floating<CR>
nmap <leader>fe :<C-u>Denite coc-diagnostic -split=floating<CR>

call denite#custom#alias('source', 'file/rec/git', 'file/rec')
call denite#custom#var('file/rec/git', 'command',
\ ['git', 'ls-files', '-co', '--exclude-standard'])
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
nnoremap <silent><buffer><expr> <CR>
\ denite#do_map('do_action')
nnoremap <silent><buffer><expr> d
\ denite#do_map('do_action', 'delete')
nnoremap <silent><buffer><expr> q
\ denitedo_map('quit')
nnoremap <silent><buffer><expr> cd
\ denite#do_map('do_action', 'cd')
nnoremap <silent><buffer><expr> i
\ denite#do_map('open_filter_buffer')
nnoremap <silent><buffer><expr> <Space>
\ denite#do_map('toggle_select').'j'
endfunction
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
hook_add = '''
let g:deol#shell_history_path = '~/.zsh_history'
nnoremap <leader>dt :Deol -split=floating<CR>
nnoremap <leader>dr :Deol -split=floating -command 'Cargo run'
nnoremap <leader>de :Deol -edit<CR>
nnoremap <leader>def :Deol -edit -split=floating<CR>
nnoremap <leader>dc :Deol -edit -cwd<CR>
nnoremap <leader>dcf :Deol -edit -cwd -split=floating<CR>
'''

[[plugins]]
repo = "neoclide/coc-denite"

[[plugins]]
repo = "neoclide/coc.nvim"
build = "./install.sh nightly"
hook_add = '''
let g:mapleader = "\<Space>"
inoremap <silent><expr> <C-n>
\ pumvisible() ? "\<C-n>" :
\ <SID>check_back_space() ? "\<TAB>" :
\ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
let col = col('.') - 1
return !col || getline('.')[col - 1] =~# '\s'
endfunction

inoremap <silent><expr> <c-space> coc#refresh()

inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

nmap <silent> gp <Plug>(coc-diagnostic-prev)
nmap <silent> gn <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gt <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nnoremap <leader>sd :call <SID>show_documentation()<CR>

function! s:show_documentation()
if &filetype == 'vim'
execute 'h '.expand('<cword>')
else
call CocAction('doHover')
endif
endfunction

autocmd CursorHold * silent call CocActionAsync('highlight')

nmap <leader>rn <Plug>(coc-rename)

augroup mygroup
autocmd!
autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

command! -nargs=0 Format :call CocAction('format')

command! -nargs=? Fold :call CocAction('fold', <f-args>)

nnoremap <leader>sa :<C-u>CocList diagnostics<cr>

imap <C-l> <Plug>(coc-snippets-expand)

" settings for coc-snippets
vmap <C-n> <Plug>(coc-snippets-select)
let g:coc_snippet_next = '<c-j>'
let g:coc_snippet_prev = '<c-k>'
imap <C-p> <Plug>(coc-snippets-expand-jump)
'''


# [[plugins]]
# repo = "liuchengxu/eleline.vim"
# hook_add = '''
# set laststatus=2
# '''

# [[plugins]]
# repo ='kristijanhusak/defx-icons'

[[plugins]]
repo ='Shougo/defx.nvim'
on_cmd = 'Defx'
hook_add = '''
nnoremap <leader>df :Defx -columns=icons:indent:filename:type -split=vertical -winwidth=25 -direction=topleft<CR>
'''
# hook_source = '''
#  call defx#custom#option('_', {
#      \ 'columns': 'indent:git:icons:filename',
#      \ 'show_ignored_files': 1,
#      \ })
# '''
[plugins.ftplugin]
defx = '''
nnoremap <silent><buffer><expr> ~ defx#async_action('cd')
nnoremap <silent><buffer><expr> h defx#async_action('cd', ['..'])
nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
nnoremap <silent><buffer><expr> l defx#async_action('open')

nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ? ':<C-u>wincmd w<CR>' : ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
nnoremap <silent><buffer><expr> <CR> defx#do_action('change_vim_cwd')
nnoremap <silent><buffer><expr> q defx#do_action('quit')

nnoremap <silent><buffer><expr> o defx#async_action('open_or_close_tree')
nnoremap <silent><buffer><expr> O defx#async_action('open_tree_recursive')

nnoremap <silent><buffer><expr> <C-d> defx#do_action('remove')
nnoremap <silent><buffer><expr> d defx#do_action('remove_trash')
nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
nnoremap <silent><buffer><expr> N defx#do_action('new_file')
nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'Time')
nnoremap <silent><buffer><expr> c defx#do_action('copy')
nnoremap <silent><buffer><expr> d defx#do_action('remove_trash')
nnoremap <silent><buffer><expr> m defx#do_action('move')
nnoremap <silent><buffer><expr> p defx#do_action('paste')
nnoremap <silent><buffer><expr> r defx#do_action('rename')
nnoremap <silent><buffer><expr> se defx#do_action('save_session')
nnoremap <silent><buffer><expr> sl defx#do_action('load_session')
nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
'''
# nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
# nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')


### plugin for julia ####
 [[plugins]]
repo = "juliaEditorSupport/julia-vim"

## color scheme ##
[[plugins]]
repo = "joshdick/onedark.vim"

[[plugins]]
repo = "kassio/neoterm"
hook_add = '''
let g:mapleader = "\<Space>"
let g:neoterm_autoscroll=1
let g:neoterm_default_mod = "belowright"
let g:neoterm_size=20
command! -nargs=0 Jsetcd call Jsetcd()
function! Jsetcd()
  let cpath = tr -d expand("%:p") expand("%:t")
  let com = ['Texec cd("']
  call add(com, cpath)
  call add(com, '")')
  let command = join(com)
  execute command
endfunction

vnoremap <leader><CR> :TREPLSendSelection<CR>
nnoremap <leader><CR> :TREPLSendLine<CR>
nnoremap <leader>sc :Jsetcd
nnoremap <leader>cd :Texec cd("
'''

[[plugins]]
repo = "itchyny/lightline.vim"
hook_add = '''
set noshowmode
set guifont=Ricty\ for\ Powerline:h18
let g:lightline = {
      \ 'colorscheme': 'onedark',
      \ 'component': {
      \  'readonly': '%{&readonly?"\u2b64":""}',
      \ },
      \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
      \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
      \ }
'''

